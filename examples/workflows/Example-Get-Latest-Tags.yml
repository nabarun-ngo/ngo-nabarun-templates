name: Example Get Latest Tags
on:
  workflow_dispatch:
    inputs:
      target_env:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev
      fe_tag_name:
        description: 'Frontend tag (leave empty or "latest" to fetch automatically)'
        required: false
        type: string
        default: 'latest'
      be_tag_name:
        description: 'Backend tag (leave empty or "latest" to fetch automatically)'
        required: false
        type: string
        default: 'latest'

jobs:
  get_tags:
    uses: ./.github/workflows/Setup-Env.yml
    with:
      inputs: ${{ toJson(github.event.inputs) }}
      script_path: "./examples/scripts/get-latest-tags.sh"

  deploy_with_tags:
    name: Deploy with Resolved Tags
    runs-on: ubuntu-latest
    needs: get_tags
    steps:
      - name: Display Resolved Configuration
        run: |
          echo "=== Complete Configuration ==="
          echo '${{ needs.get_tags.outputs.variables }}' | jq .
          
      - name: Extract Tag Information
        run: |
          variables='${{ needs.get_tags.outputs.variables }}'
          
          # Extract individual tags
          fe_tag=$(echo "$variables" | jq -r '.FE_TAG_NAME // .fe_tag_name // "unknown"')
          be_tag=$(echo "$variables" | jq -r '.BE_TAG_NAME // .be_tag_name // "unknown"')
          environment=$(echo "$variables" | jq -r '.target_env // .environment // "dev"')
          branch=$(echo "$variables" | jq -r '.TARGET_BRANCH // "stage"')
          
          echo "🎯 Deployment Configuration:"
          echo "  Environment: $environment"
          echo "  Branch: $branch"
          echo "  Frontend Tag: $fe_tag"
          echo "  Backend Tag: $be_tag"
          
          # Set as job outputs for later steps
          echo "fe_tag=$fe_tag" >> "$GITHUB_ENV"
          echo "be_tag=$be_tag" >> "$GITHUB_ENV"
          echo "target_env=$environment" >> "$GITHUB_ENV"
          
      - name: Show Deployment Metadata
        run: |
          variables='${{ needs.get_tags.outputs.variables }}'
          
          # Extract deployment info
          deployment_ready=$(echo "$variables" | jq -r '.deployment_info.frontend.tag_fetched // false')
          fe_repo=$(echo "$variables" | jq -r '.deployment_info.frontend.repository // "unknown"')
          be_repo=$(echo "$variables" | jq -r '.deployment_info.backend.repository // "unknown"')
          
          echo "📊 Deployment Metadata:"
          echo "  Frontend Repository: $fe_repo"
          echo "  Backend Repository: $be_repo"
          echo "  Tags Fetched: $deployment_ready"
          
          # Check deployment readiness
          if [[ "${{ env.fe_tag }}" != "unknown" && "${{ env.be_tag }}" != "unknown" ]]; then
            echo "✅ Deployment is ready to proceed"
          else
            echo "⚠️ Some tags are missing - deployment may not be ready"
          fi
          
      - name: Simulate Deployment
        run: |
          echo "🚀 Starting deployment simulation..."
          echo "  Environment: ${{ env.target_env }}"
          echo "  Frontend: ${{ env.fe_tag }}"
          echo "  Backend: ${{ env.be_tag }}"
          
          # Simulate deployment steps
          echo "📦 Pulling frontend image: nabarun-ngo/frontend:${{ env.fe_tag }}"
          echo "📦 Pulling backend image: nabarun-ngo/backend:${{ env.be_tag }}"
          
          case "${{ env.target_env }}" in
            "prod")
              echo "🔴 Production deployment - applying extra validations"
              echo "  - Health checks enabled"
              echo "  - Blue-green deployment strategy"
              echo "  - Monitoring alerts configured"
              ;;
            "staging")
              echo "🟡 Staging deployment"
              echo "  - Integration tests will run post-deployment"
              ;;
            "dev")
              echo "👨‍💻 Development deployment"
              echo "  - Fast deployment with minimal checks"
              ;;
          esac
          
          echo "✅ Deployment simulation completed successfully!"

      - name: Deployment Summary
        run: |
          variables='${{ needs.get_tags.outputs.variables }}'
          
          echo "📋 Final Deployment Summary:"
          echo "================================"
          
          # Create deployment summary
          cat << EOF
          **Deployment Configuration**
          - Environment: ${{ env.target_env }}
          - Frontend Tag: ${{ env.fe_tag }}
          - Backend Tag: ${{ env.be_tag }}
          - Execution Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          **Repository Information**
          - Frontend: $(echo "$variables" | jq -r '.deployment_info.frontend.repository')
          - Backend: $(echo "$variables" | jq -r '.deployment_info.backend.repository')
          - Source Branch: $(echo "$variables" | jq -r '.TARGET_BRANCH')
          
          **Status: Ready for Production** ✅
          EOF
