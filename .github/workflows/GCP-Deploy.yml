name: Build and Deploy to GCP App Engine
on:
  workflow_call:
    inputs:
      tag_name:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      repo_owner_name:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      environment_url:
        required: false
        type: string
      target_folder:
        required: true
        type: string
      gcp_project_id:
        required: true
        type: string
      gae_app_yaml_path:
        required: false
        type: string
        default: 'app.yaml'
      gae_service_name:
        required: false
        type: string
        default: 'default'
      app_env:
        required: true
        type: string
      app_doppler_project_name:
        required: true
        type: string
      app_log_level:
        required: false
        type: string
        default: 'INFO'
    secrets:
      gcp_service_account:
        required: true
      app_doppler_service_token:
        required: true
      repo_token:
        required: true
jobs:  
  build_and_deploy_to_gcp:
    name: 'Build and Deploy to GCP App Engine'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    timeout-minutes: 60
    steps:
      - name: Initialize Monitoring and Observability
        uses: ./.github/actions/monitoring-observability
        id: monitoring
        with:
          operation_name: "GCP-Deploy"
          environment: ${{ inputs.environment_name }}
          service_name: ${{ inputs.repo_name }}
          enable_metrics: 'true'
          enable_tracing: 'true'

      - name: Security Validation and Pre-flight Checks
        uses: ./.github/actions/security-validation
        with:
          environment: ${{ inputs.environment_name }}
          tag_name: ${{ inputs.tag_name }}
          repo_name: ${{ inputs.repo_name }}
          repo_owner_name: ${{ inputs.repo_owner_name }}
          enable_security_scan: ${{ inputs.environment_name == 'prod' && 'true' || 'false' }}
          enable_dependency_check: 'true'
          max_severity_allowed: ${{ inputs.environment_name == 'prod' && 'MEDIUM' || 'HIGH' }}

      - name: Checkout and Setup Environment
        uses: ./.github/actions/checkout-and-setup
        with:
          tag_name: ${{ inputs.tag_name }}
          repo_name: ${{ inputs.repo_name }}
          repo_owner_name: ${{ inputs.repo_owner_name }}
          setup_java: 'true'
          java_version: '17'
     
      - name: Create GitHub Deployment
        uses: ./.github/actions/github-deployment
        id: deployment
        with:
          token: ${{ secrets.repo_token }}
          environment_name: ${{ inputs.environment_name }}
          environment_url: ${{ inputs.environment_url }}
          repo_name: ${{ inputs.repo_name }}
          repo_owner_name: ${{ inputs.repo_owner_name }}
          tag_name: ${{ inputs.tag_name }}
        
      - name: Build with Maven (with Retry)
        uses: ./.github/actions/error-handling-retry
        id: build-retry
        with:
          command: "mvn clean package -DskipTests=false -Dmaven.test.failure.ignore=false"
          max_retries: 2
          retry_delay: 30
          timeout_minutes: 20
          enable_failure_analysis: 'true'
          
      - name: Extract JAR Path
        uses: ./.github/actions/maven-build
        id: build
        with:
          target_folder: ${{ inputs.target_folder }}
          build_command: "echo 'Build completed, extracting JAR path'"
          
      - name: Setup Google Cloud Platform
        uses: ./.github/actions/gcp-setup
        with:
          gcp_project_id: ${{ inputs.gcp_project_id }}
          gcp_service_account: ${{ secrets.gcp_service_account }}
        
      - name: Setup Application Variables
        uses: ikuanyshbekov/app-yaml-env-compiler@v1.0
        with:
          path: '${{ inputs.gae_app_yaml_path }}'
        env:
         ENVIRONMENT: ${{ inputs.app_env }} 
         DOPPLER_PROJECT_NAME: ${{ inputs.app_doppler_project_name }}
         DOPPLER_SERVICE_TOKEN: ${{ secrets.app_doppler_service_token }}  
         LOG_LEVEL: ${{ inputs.app_log_level }}
         VERSION: ${{ inputs.tag_name }}
         
      - name: Pre-deployment Health Check
        shell: bash
        run: |
          echo "üè• Performing pre-deployment health checks..."
          # Add any pre-deployment validations here
          echo "‚úÖ Pre-deployment checks passed"

      - name: Deploy to Google App Engine (with Retry)
        uses: ./.github/actions/error-handling-retry
        id: deploy-retry
        with:
          command: |
            gcloud app deploy ${{ inputs.gae_app_yaml_path }} \
              --project=${{ inputs.gcp_project_id }} \
              --version=$(echo ${{ inputs.tag_name }} | tr '.' '-' | tr '[:upper:]' '[:lower:]') \
              --promote --stop-previous-version \
              --quiet
          max_retries: 1
          retry_delay: 60
          timeout_minutes: 30
          enable_failure_analysis: 'true'

      - name: Post-deployment Health Check
        if: steps.deploy-retry.outputs.execution_status == 'success'
        shell: bash
        timeout-minutes: 10
        run: |
          echo "üè• Performing post-deployment health checks..."
          
          # Wait for deployment to be ready
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 30
          
          # Health check with retry
          MAX_ATTEMPTS=5
          ATTEMPT=1
          HEALTH_CHECK_PASSED=false
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$HEALTH_CHECK_PASSED" = false ]; do
            echo "üîç Health check attempt $ATTEMPT/$MAX_ATTEMPTS"
            
            # Replace with actual health check endpoint
            HEALTH_URL="https://${{ inputs.gcp_project_id }}.appspot.com/health"
            
            # Perform health check (placeholder)
            if curl -f -s --max-time 10 "$HEALTH_URL" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed"
              HEALTH_CHECK_PASSED=true
            else
              echo "‚ùå Health check failed (attempt $ATTEMPT)"
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "‚è≥ Waiting 30s before retry..."
                sleep 30
              fi
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "‚ùå Health checks failed - deployment may be unhealthy"
            exit 1
          fi
          
          echo "‚úÖ Post-deployment health checks completed successfully"
     
      - name: Update deployment status (success)
        if: success()
        uses: ./.github/actions/deployment-status
        with:
          state: 'success'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ secrets.repo_token }}
          environment_url: ${{ inputs.environment_url }}
          repo_name: ${{ inputs.repo_name }}
          repo_owner_name: ${{ inputs.repo_owner_name }}

      - name: Update deployment status (failure)
        if: failure()
        uses: ./.github/actions/deployment-status
        with:
          state: 'failure'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ secrets.repo_token }}
          environment_url: ${{ inputs.environment_url }}
          repo_name: ${{ inputs.repo_name }}
          repo_owner_name: ${{ inputs.repo_owner_name }}
  
  resource_management_and_cleanup:
    name: 'Resource Management and Cleanup'
    runs-on: ubuntu-latest
    needs: [build_and_deploy_to_gcp]
    if: always() && needs.build_and_deploy_to_gcp.result != 'cancelled'
    timeout-minutes: 30
    steps:
      - name: Checkout template repository
        uses: actions/checkout@v4
        
      - name: Production-Grade Resource Management
        uses: ./.github/actions/resource-management
        with:
          cloud_provider: 'gcp'
          project_id: ${{ inputs.gcp_project_id }}
          environment: ${{ inputs.environment_name }}
          service_account: ${{ secrets.gcp_service_account }}
          cleanup_old_versions: 'true'
          max_versions_to_keep: ${{ inputs.environment_name == 'prod' && '10' || '5' }}
          cleanup_unused_resources: 'true'
          cost_budget_threshold: ${{ inputs.environment_name == 'prod' && '500' || '100' }}
          enable_cost_monitoring: 'true'
          resource_tags: |
            {
              "environment": "${{ inputs.environment_name }}",
              "service": "${{ inputs.repo_name }}",
              "managed_by": "github-actions",
              "owner": "${{ github.actor }}"
            }
