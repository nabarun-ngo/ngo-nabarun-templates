name: Build and Deploy to GCP App Engine
on:
  workflow_call:
    inputs:
      tag_name:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      repo_owner_name:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      environment_url:
        required: false
        type: string
      target_folder:
        required: true
        type: string
      gcp_project_id:
        required: true
        type: string
      gae_app_yaml_path:
        required: false
        type: string
        default: 'app.yaml'
      gae_service_name:
        required: false
        type: string
        default: 'default'
      app_env:
        required: true
        type: string
      app_doppler_project_name:
        required: true
        type: string
      app_log_level:
        required: false
        type: string
        default: 'INFO'
    secrets:
      gcp_service_account:
        required: true
      app_doppler_service_token:
        required: true
      repo_token:
        required: true
jobs:  
  build_and_deploy_to_gcp:
    name: 'Build and Deploy to GCP App Engine'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository | Tag ${{ inputs.tag_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_name }}
          repository: '${{ inputs.repo_owner_name }}/${{ inputs.repo_name }}'
     
      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ secrets.repo_token }}
          environment-url: ${{ inputs.environment_url }}
          environment: ${{ inputs.environment_name }}
          repo: ${{ inputs.repo_name }}
          owner: ${{ inputs.repo_owner_name }}
          ref: ${{ inputs.tag_name }} 
    
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17' 
          distribution: 'adopt'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-   
        
      - name: Build with Maven
        run: |
          mvn clean package
          
      - name: Get JAR file path
        id: get-jar-path
        run: |
          JAR_PATH=$(find ${{ inputs.target_folder }} -name "*.jar" | grep -v "sources.jar" | grep -v "javadoc.jar")
          echo "jar_path=${JAR_PATH}" >> $GITHUB_ENV
          echo "JAR file path: ${JAR_PATH}"
          
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ inputs.gcp_project_id }}
          credentials_json: ${{ secrets.gcp_service_account }}
          export_default_credentials: true
        
      - name: Setup Application Variables
        uses: ikuanyshbekov/app-yaml-env-compiler@v1.0
        with:
          path: '${{ inputs.gae_app_yaml_path }}'
        env:
         ENVIRONMENT: ${{ inputs.app_env }} 
         DOPPLER_PROJECT_NAME: ${{ inputs.app_doppler_project_name }}
         DOPPLER_SERVICE_TOKEN: ${{ secrets.app_doppler_service_token }}  
         LOG_LEVEL: ${{ inputs.app_log_level }}
         VERSION: ${{ inputs.tag_name }}
         
      - name: Deploy to Google App Engine
        uses: google-github-actions/deploy-appengine@v2
        with:
          project_id: ${{ inputs.gcp_project_id }}
          credentials: ${{ secrets.gcp_service_account }}
          promote: true
          deliverables: ${{ env.jar_path }}
          flags: '--appyaml=${{ inputs.gae_app_yaml_path }}'
     
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ secrets.repo_token }}
          environment-url: ${{ inputs.environment_url }}
          repo: ${{ inputs.repo_name }}
          owner: ${{ inputs.repo_owner_name }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ secrets.repo_token }}
          environment-url: ${{ inputs.environment_url }}
          repo: ${{ inputs.repo_name }}
          owner: ${{ inputs.repo_owner_name }}
  
  clean_gcp_resources:
    runs-on: ubuntu-latest
    needs: [build_and_deploy_to_gcp]
    steps:     
      - name: Encode Variable to Base64
        id: encode
        run: |
          ENCODED=$(echo '${{ secrets.gcp_service_account }}' | base64)
          echo 'GCP_SA_KEY_ENCODED<<EOF' >> $GITHUB_ENV
          echo "$ENCODED" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      
      - name: Delete GAE versions
        uses: vijayp23/delete-gae-version-action@1.0.0
        with:
          service-account: ${{ env.GCP_SA_KEY_ENCODED }}
          project-id: ${{ inputs.gcp_project_id }}
          service-name: ${{ inputs.gae_service_name }}
          
  delete-artifacts:
    runs-on: ubuntu-latest
    needs: [build_and_deploy_to_gcp]
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ inputs.gcp_project_id }}
          credentials_json: ${{ secrets.gcp_service_account }}
          export_default_credentials: true

      - name: List and delete Artifact Registry repositories
        run: |
          REGION="asia-south1"  # change this to your region
          REPOS=$(gcloud artifacts repositories list --location=$REGION --format="value(name)")

          if [ -z "$REPOS" ]; then
            echo "No repositories found in $REGION"
          else
            for REPO in $REPOS; do
              echo "Deleting repository: $REPO"
              gcloud artifacts repositories delete "$REPO" --location="$REGION" --quiet
            done
          fi
