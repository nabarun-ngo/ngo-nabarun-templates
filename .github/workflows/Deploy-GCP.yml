name: Build and Deploy to GCP App Engine
on:
  workflow_call:
    inputs:
      tag_name:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      repo_owner_name:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      environment_url:
        required: false
        type: string
      target_folder:
        required: true
        type: string
      gcp_project_id:
        required: true
        type: string
      gae_app_yaml_path:
        required: false
        type: string
        default: 'app.yaml'
      gae_service_name:
        required: false
        type: string
        default: 'default'
      app_env:
        required: true
        type: string
      app_doppler_project_name:
        required: true
        type: string
      app_log_level:
        required: false
        type: string
        default: 'INFO'
      keep_gae_versions:
        description: "Number of GAE versions to keep (optional, default 1)"
        required: false
        type: number
        default: 1
      gcs_keep_days:
        description: "Number of days to keep files in GCS bucket (optional, default 5)"
        required: false
        type: number
        default: 5
    secrets:
      gcp_service_account:
        required: true
      app_doppler_service_token:
        required: true
      repo_token:
        required: true
jobs:  
  build_and_deploy_to_gcp:
    name: 'Build and Deploy to GCP App Engine'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    steps:
      - name: Checkout repository | Tag ${{ inputs.tag_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_name }}
          repository: '${{ inputs.repo_owner_name }}/${{ inputs.repo_name }}'
     
      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ secrets.repo_token }}
          environment-url: ${{ inputs.environment_url }}
          environment: ${{ inputs.environment_name }}
          repo: ${{ inputs.repo_name }}
          owner: ${{ inputs.repo_owner_name }}
          ref: ${{ inputs.tag_name }} 
    
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17' 
          distribution: 'adopt'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-   
        
      - name: Build with Maven
        run: |
          mvn clean package
          
      - name: Get JAR file path
        id: get-jar-path
        run: |
          JAR_PATH=$(find ${{ inputs.target_folder }} -name "*.jar" | grep -v "sources.jar" | grep -v "javadoc.jar")
          echo "jar_path=${JAR_PATH}" >> $GITHUB_ENV
          echo "JAR file path: ${JAR_PATH}"
          echo "::set-output name=jar_path::${JAR_PATH}"
          
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ inputs.gcp_project_id }}
          credentials_json: ${{ secrets.gcp_service_account }}
        
      - name: Setup Application Variables
        uses: ikuanyshbekov/app-yaml-env-compiler@v1.0
        with:
          path: '${{ inputs.gae_app_yaml_path }}'
        env:
         ENVIRONMENT: ${{ inputs.app_env }} 
         DOPPLER_PROJECT_NAME: ${{ inputs.app_doppler_project_name }}
         DOPPLER_SERVICE_TOKEN: ${{ secrets.app_doppler_service_token }}  
         LOG_LEVEL: ${{ inputs.app_log_level }}
         VERSION: ${{ inputs.tag_name }}
         
      - name: Deploy to Google App Engine
        uses: google-github-actions/deploy-appengine@v2
        with:
          project_id: ${{ inputs.gcp_project_id }}
          deliverables: ${{ steps.get-jar-path.outputs.jar_path }}
          flags: '--appyaml=${{ inputs.gae_app_yaml_path }}'
     
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ secrets.repo_token }}
          environment-url: ${{ inputs.environment_url }}
          repo: ${{ inputs.repo_name }}
          owner: ${{ inputs.repo_owner_name }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ secrets.repo_token }}
          environment-url: ${{ inputs.environment_url }}
          repo: ${{ inputs.repo_name }}
          owner: ${{ inputs.repo_owner_name }}
  
           
          
  clean_gcp_resources:
    name: 'Clean Up Old GCP Resources'
    runs-on: ubuntu-latest
    needs: [build_and_deploy_to_gcp]
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ inputs.gcp_project_id }}
          credentials_json: ${{ secrets.gcp_service_account }}

      - name: List and delete Artifact Registry repositories
        run: |
          # Try to fetch region from GAE app location
          PROJECT="${{ inputs.gcp_project_id }}"
          REGION=$(gcloud app describe --project="$PROJECT" --format="value(locationId)")
          if [ -z "$REGION" ]; then
            echo "Could not determine region from App Engine. Using default: asia-south1"
            exit 1
          fi
          REPOS=$(gcloud artifacts repositories list --location="$REGION" --format="value(name)")
          echo "Extracted repositories in region $REGION:"
          echo "$REPOS"
          if [ -z "$REPOS" ]; then
            echo "No repositories found in $REGION"
            exit 1
          else
            for REPO in $REPOS; do
              echo "Deleting repository: $REPO"
              gcloud artifacts repositories delete "$REPO" --location="$REGION" --quiet
            done
          fi
        continue-on-error: true

      - name: Delete all GAE versions
        run: |
          SERVICE="${{ inputs.gae_service_name }}"
          PROJECT="${{ inputs.gcp_project_id }}"
          KEEP=${{ inputs.keep_gae_versions }}
          VERSIONS=$(gcloud app versions list --service="$SERVICE" --project="$PROJECT" --format="value(version.id)" --sort-by=~version.createTime)
          COUNT=$(echo "$VERSIONS" | wc -l)
          if [ "$COUNT" -le "$KEEP" ]; then
            echo "No old versions to delete."
            exit 0
          fi
          DELETE_VERSIONS=$(echo "$VERSIONS" | head -n -$KEEP)
          for VER in $DELETE_VERSIONS; do
            echo "Deleting version: $VER"
            gcloud app versions delete "$VER" --service="$SERVICE" --project="$PROJECT" --quiet
          done

      - name: Clean old files from GCS bucket
        run: |
            BUCKET="staging.${{ inputs.gcp_project_id }}.appspot.com"
            KEEP_DAYS=${{ inputs.gcs_keep_days }}
            PROJECT="${{ inputs.gcp_project_id }}"
            echo "Cleaning files older than $KEEP_DAYS days from bucket: $BUCKET"
            NOW_EPOCH=$(date +%s)
            FILES=$(gcloud storage ls --project="$PROJECT" "gs://$BUCKET/**" | while read FILE; do
              CREATE_TIME=$(gcloud storage objects describe "$FILE" --project="$PROJECT" --format="get(timeCreated)")
              FILE_EPOCH=$(date -d "$CREATE_TIME" +%s)
              AGE_DAYS=$(( (NOW_EPOCH - FILE_EPOCH) / 86400 ))
              if [ "$AGE_DAYS" -ge "$KEEP_DAYS" ]; then
                echo $FILE
              fi
            done)
            if [ -z "$FILES" ]; then
              echo "No files older than $KEEP_DAYS days to delete."
              exit 0
            fi
            for FILE in $FILES; do
              echo "Deleting file: $FILE"
              gcloud storage rm "$FILE" --project="$PROJECT"
            done
