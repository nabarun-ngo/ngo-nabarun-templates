
name: Run Automated Test [Parallel]
on:
  workflow_call:
    inputs:
      test_env:
        required: true
        type: string
      test_doppler_project_name:
        required: true
        type: string
      test_cucumber_tags:
        required: true
        type: string
      test_type:
        required: true
        type: string
      max_tests_per_matrix:
        required: false
        type: number
        default: 2
      app_ui_version:
        required: false
        type: string
        default: 'latest'
      app_server_version:
        required: false
        type: string
        default: 'latest'
      java_version:
        required: false
        type: string
        default: '22'
      target_folder:
        required: false
        type: string
        default: 'target'
      repository_name:
        required: false
        type: string
        default: 'nabarun-ngo/ngo-nabarun-test'
      branch_name:
        required: false
        type: string
        default: 'master'
      test_cycle:
        required: false
        type: string
      test_cycle_folder:
        required: false
        type: string
        default: '1388976'
      test_case_folder:
        required: false
        type: string
        default: '1449797'
      qmetry_project_id:
        required: false
        type: string
        default: '10004'
      jira_url:
        required: false
        type: string
        default: 'https://ngonabarun.atlassian.net'
      upload_result:
        required: false
        type: boolean
        default: true
        
    secrets:
      test_doppler_service_token:
        required: true
      qmetry_api_key:
        required: true
      qmetry_open_api_key:
        required: true
        
jobs:
  discover-scenarios:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout template repo (with scripts)
        uses: actions/checkout@v4
        with:
          repository: nabarun-ngo/ngo-nabarun-templates
          path: 'actions'

      - name: Checkout repository | Branch ${{ inputs.branch_name }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository_name }}
          ref: ${{ inputs.branch_name }}
          path: 'test'

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ inputs.java_version }} 
          distribution: 'adopt'

      - name: Install jq
        run: sudo apt-get install jq

      - name: Run discovery script
        id: set-matrix
        run: |
          cd ./testing
          bash actions/scripts/discover_scenarios.sh "${{ inputs.test_cucumber_tags }}" "${{ inputs.max_tests_per_matrix }}"

  run_test:
    needs: discover-scenarios
    name: 'Run Test'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-scenarios.outputs.matrix) }}
    steps:   
      - name: Checkout repository | Branch ${{ inputs.branch_name }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository_name }}
          ref: ${{ inputs.branch_name }}

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ inputs.java_version }} 
          distribution: 'adopt'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-   

      - name: Run Cucumber Tests
        run: |
          echo "Run Id : ${{ github.run_id }}"
          echo "Test tags: ${{ inputs.test_cucumber_tags }}"
          echo "Running the following scenarios:"
          echo "${{ toJson(matrix.scenarios) }}" | jq -r '.[]'
          echo "${{ toJson(matrix.scenarios) }}" | jq -r '.[]' > batch.txt
          cat batch.txt

          mvn clean test \
                -Dcucumber.options="@batch.txt" \
                -Dcucumber.plugin="pretty,html:target/cucumber.html,json:target/cucumber.json,rerun:target/rerun.txt" \
                -DENVIRONMENT=${{ inputs.test_env }} \
                -DCONFIG_SOURCE=doppler \
                -DDOPPLER_PROJECT_NAME=${{ inputs.test_doppler_project_name }} \
                -DDOPPLER_SERVICE_TOKEN=${{ secrets.test_doppler_service_token }} \
                -Dheadless=Y || TEST_FAILED=true
                
          if [ "$TEST_FAILED" = "true" ]; then
            echo "TEST_STATUS=FAILED" >> $GITHUB_ENV
          else
            echo "TEST_STATUS=SUCCESS" >> $GITHUB_ENV
          fi
        continue-on-error: true
        
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/cucumber.json
      
      - name: Upload rerun file
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: rerun-${{ strategy.job-index }}
          path: target/rerun.txt
          
      - name: Tests Result
        run: |
          echo "Test Status: $TEST_STATUS"
          if [ "$TEST_STATUS" = "FAILED" ]; then
            exit 1
          fi
          
  upload_test_result:
    name: 'Upload Test Results'
    if: ${{ inputs.upload_result == true &&  needs.run_test.result != 'cancelled' && always() }}
    runs-on: ubuntu-latest
    needs: run_test
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results
      
      - name: Generate Test Cycle Summary
        id: testCycle
        run: |
          echo "test_cycle_summary=Automated Test Cycle - ${{ inputs.test_type }} | Run Id : ${{ github.run_id }}" >> $GITHUB_OUTPUT  
      
      - name: Restore Cached Variables
        uses: actions/cache@v4
        with:
          path: variables.env
          key: cache-variables-${{ github.run_id }}
          restore-keys: |
            cache-variables-${{ github.run_id }}

      - name: Load Variables
        run: |
          if [ -f variables.env ]; then
            cat variables.env >> $GITHUB_ENV
            echo "✅ Variables restored successfully!"
          else
            echo "❌ No cache found (first run)."
          fi
          echo "test_cycle=${{ env.test_cycle }}"

      - name: Generate Upload URL
        id: generate_url
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://qtmcloud.qmetry.com/rest/api/automation/importresult'
          method: POST
          customHeaders: '{"Content-Type": "application/json","apiKey":"${{ secrets.qmetry_api_key }}"}'
          data: |
           {
              "format": "cucumber",
              "testCycleToReuse": "${{ env.test_cycle }}",
              "attachFile": true,
              "isZip": false,
              "environment": "${{ inputs.test_env }}",
              "matchTestSteps": true,
              "fields": {
                "testCycle": {
                  "folderId": ${{ inputs.test_cycle_folder }},
                  "summary": "${{ steps.testCycle.outputs.test_cycle_summary }}"
                },
                "testCase": {
                  "priority": "High",
                  "folderId": ${{ inputs.test_case_folder }}
                },
                "testCaseExecution": {
                  "customFields": [
                    {
                      "name": "Run Id",
                      "value": "${{ github.run_id }}-${{ github.run_attempt }}"
                    },
                    {
                      "name": "Server Version",
                      "value": "${{ inputs.app_server_version }}"
                    },
                    {
                      "name": "UI Version",
                      "value": "${{ inputs.app_ui_version }}"
                    },
                    {
                      "name": "Test Type",
                      "value": "${{ inputs.test_type }}"
                    }
                  ]
                }
              }
            }
      - name: Upload file using PUT request
        run: |
          curl -X PUT \
            -H "Content-Type: multipart/form-data" \
            -H "User-Agent: PostmanRuntime/7.43.0" \
            -d @cucumber.json \
            '${{ fromJson(steps.generate_url.outputs.response).url }}'
      
      - name: Sleep for 60 seconds
        run: sleep 60s
        shell: bash
        
      - name: Retrieve Test Cycles 
        id: retrieve_tc
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://qtmcloud.qmetry.com/rest/api/latest/testcycles/search/?fields=key'
          method: POST
          customHeaders: '{"Content-Type": "application/json","apiKey":"${{ secrets.qmetry_open_api_key }}"}'
          data: |
            {
              "filter": {
                "summary": "${{ steps.testCycle.outputs.test_cycle_summary }}",
                "projectId": "${{ inputs.qmetry_project_id }}",
                "isAutomated": true
              }
            }
      
      - name: Generate Execution URL
        id: gen_exec_url
        run: |
          execution_id=${{ fromJson(steps.retrieve_tc.outputs.response).data[0].id }}
          test_cycle=${{ fromJson(steps.retrieve_tc.outputs.response).data[0].key }} 
          execution_url=${{ inputs.jira_url }}/plugins/servlet/ac/com.infostretch.QmetryTestManager/qtm4j-test-management?project.id=${{ inputs.qmetry_project_id }}#!/executionPage/$execution_id
          echo "execution_url=$execution_url" >> $GITHUB_OUTPUT  
          echo "execution_id=$execution_id" >> variables.env
          echo "test_cycle=$test_cycle" >> variables.env
          echo "JIRA Qmetry Test Cycle : $test_cycle"
          echo "JIRA Qmetry Execution URL : $execution_url"

      - name: Cache Variables by `run_id` ${{ github.run_id }}
        uses: actions/cache@v4
        with:
          path: variables.env
          key: cache-variables-${{ github.run_id }}
      
      
