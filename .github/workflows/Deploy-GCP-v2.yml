name: Build and Deploy to GCP App Engine v2
on:
  workflow_call:
    inputs:
      tag_name:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      repo_owner_name:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      environment_url:
        required: false
        type: string
      target_folder:
        required: true
        type: string
      gae_app_yaml_path:
        required: false
        type: string
        default: 'app.yaml'
      gae_service_name:
        required: false
        type: string
        default: 'default'
      app_env:
        required: true
        type: string
      app_doppler_project_name:
        required: true
        type: string
      app_log_level:
        required: false
        type: string
        default: 'INFO'
      keep_gae_versions:
        description: "Number of GAE versions to keep (optional, default 1)"
        required: false
        type: number
        default: 1
      gcs_keep_days:
        description: "Number of days to keep files in GCS bucket (optional, default 5)"
        required: false
        type: number
        default: 5
      # New v2 inputs for better control
      java_version:
        description: "Java version to use (default: 17)"
        required: false
        type: string
        default: '17'
      deployment_timeout:
        description: "Deployment timeout in minutes (default: 25)"
        required: false
        type: number
        default: 25
      enable_health_check:
        description: "Enable post-deployment health check (default: true)"
        required: false
        type: boolean
        default: true
      maven_options:
        description: "Additional Maven options"
        required: false
        type: string
        default: '-Dmaven.test.skip=true -Dmaven.javadoc.skip=true'
    outputs:
      # Build outputs
      build_status:
        description: 'Status of the build process'
        value: ${{ jobs.build_application.result }}
      jar_name:
        description: 'Name of the built JAR file'
        value: ${{ jobs.build_application.outputs.jar_name }}
      # Deployment outputs
      deployment_status:
        description: 'Status of the deployment process'
        value: ${{ jobs.deploy_to_gcp.result }}
      deployment_version:
        description: 'Deployed GAE version ID'
        value: ${{ jobs.deploy_to_gcp.outputs.deployment_version }}
      deployment_id:
        description: 'GitHub deployment ID'
        value: ${{ jobs.deploy_to_gcp.outputs.deployment_id }}
      # Cleanup outputs
      cleanup_status:
        description: 'Status of the cleanup process'
        value: ${{ jobs.clean_gcp_resources.result }}
      # Summary outputs
      overall_status:
        description: 'Overall workflow execution status'
        value: ${{ (jobs.build_application.result == 'success' && jobs.deploy_to_gcp.result == 'success') && 'success' || 'failure' }}
      deployment_summary:
        description: 'Deployment summary information'
        value: 'Tag: ${{ inputs.tag_name }} | Service: ${{ inputs.gae_service_name }} | Environment: ${{ inputs.environment_name }} | Version: ${{ jobs.deploy_to_gcp.outputs.deployment_version }}'
    secrets:
      gcp_project_id:
        required: true
      gcp_service_account:
        required: true
      app_doppler_service_token:
        required: true
      repo_token:
        required: true


jobs:

  build_application:
    name: 'Build Application'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      jar_name: ${{ steps.get-jar-path.outputs.file_name }}
    steps:
      - name: Checkout repository | Tag ${{ inputs.tag_name }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_name }}
          repository: '${{ inputs.repo_owner_name }}/${{ inputs.repo_name }}'
          fetch-depth: 0
          token: ${{ secrets.repo_token }}
    
      - name: Build with Maven
        id: maven_build
        uses: nabarun-ngo/ngo-nabarun-templates/.github/actions/build-java@main
        with:
          java_version: ${{ inputs.java_version }}
          maven_command: 'clean package'
          maven_options: ${{ inputs.maven_options }}
          upload_test_results: 'false'
          enable_cache: 'true'
          cache_key_prefix: 'maven'
          
      - name: Validate and Get JAR file path
        id: get-jar-path
        uses: nabarun-ngo/ngo-nabarun-templates/.github/actions/validate-and-find-file@main
        with:
          search_directory: ${{ inputs.target_folder }}
          file_pattern: '*.jar'
          exclude_patterns: 'sources,javadoc,test'
          file_type: 'JAR'
          selection_strategy: 'first'
          validate_file: 'true'
          
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar-${{ inputs.tag_name }}
          path: ${{ steps.get-jar-path.outputs.file_path }}
          retention-days: 1
          
      - name: Upload app.yaml artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-yaml-${{ inputs.tag_name }}
          path: ${{ inputs.gae_app_yaml_path }}
          retention-days: 1

  deploy_to_gcp:
    name: 'Deploy to GCP App Engine'
    runs-on: ubuntu-latest
    needs: [build_application]
    if: |
      always() &&
      needs.build_application.result == 'success'
    environment: ${{ inputs.environment_name }}
    timeout-minutes: ${{ inputs.deployment_timeout }}
    outputs:
      deployment_version: ${{ steps.get_version.outputs.version }}
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar-${{ inputs.tag_name }}
          path: ./artifacts/
          
      - name: Download app.yaml artifact to workspace root
        uses: actions/download-artifact@v4
        with:
          name: app-yaml-${{ inputs.tag_name }}
          path: .

      - name: Create GitHub Deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ secrets.repo_token }}
          environment-url: ${{ inputs.environment_url }}
          environment: ${{ inputs.environment_name }}
          repo: ${{ inputs.repo_name }}
          owner: ${{ inputs.repo_owner_name }}
          ref: ${{ inputs.tag_name }}
                  
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.gcp_project_id }}
          credentials_json: ${{ secrets.gcp_service_account }}
        
      - name: Setup Application Variables
        uses: ikuanyshbekov/app-yaml-env-compiler@v1.0
        with:
          path: '${{ inputs.gae_app_yaml_path }}'
        env:
          ENVIRONMENT: ${{ inputs.app_env }}
          DOPPLER_PROJECT_NAME: ${{ inputs.app_doppler_project_name }}
          DOPPLER_SERVICE_TOKEN: ${{ secrets.app_doppler_service_token }}
          LOG_LEVEL: ${{ inputs.app_log_level }}
          VERSION: ${{ inputs.tag_name }}
         
      - name: Deploy to Google App Engine
        uses: google-github-actions/deploy-appengine@v2
        timeout-minutes: 20
        with:
          project_id: ${{ secrets.gcp_project_id }}
          deliverables: './artifacts/${{ needs.build_application.outputs.jar_name }}'
          flags: '--appyaml=${{ inputs.gae_app_yaml_path }} --quiet --no-promote'
          
      - name: Get deployed version
        id: get_version
        uses: nabarun-ngo/ngo-nabarun-templates/.github/actions/gcp-get-deployed-version@main
        with:
          project_id: ${{ secrets.gcp_project_id }}
          service_name: ${{ inputs.gae_service_name }}
          
      - name: Promote to production
        uses: nabarun-ngo/ngo-nabarun-templates/.github/actions/gcp-promote-gae-traffic@main
        timeout-minutes: 10
        with:
          project_id: ${{ secrets.gcp_project_id }}
          service_name: ${{ inputs.gae_service_name }}
          version: ${{ steps.get_version.outputs.version }}

      - name: Health check deployment
        if: inputs.enable_health_check
        uses: nabarun-ngo/ngo-nabarun-templates/.github/actions/gcp-health-check-deployment@main
        timeout-minutes: 5
        with:
          environment_url: ${{ inputs.environment_url }}

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ secrets.repo_token }}
          environment-url: ${{ inputs.environment_url }}
          repo: ${{ inputs.repo_name }}
          owner: ${{ inputs.repo_owner_name }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ secrets.repo_token }}
          environment-url: ${{ inputs.environment_url }}
          repo: ${{ inputs.repo_name }}
          owner: ${{ inputs.repo_owner_name }}

  clean_gcp_resources:
    name: 'Clean Up Old GCP Resources'
    runs-on: ubuntu-latest
    needs: [deploy_to_gcp]
    environment: ${{ inputs.environment_name }}
    # Only run cleanup when deployment succeeds
    if: needs.deploy_to_gcp.result == 'success'
    timeout-minutes: 20
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.gcp_project_id }}
          credentials_json: ${{ secrets.gcp_service_account }}

      - name: Clean Artifact Registry repositories
        uses: nabarun-ngo/ngo-nabarun-templates/.github/actions/gcp-clean-artifact-registry@main
        continue-on-error: true
        with:
          project_id: ${{ secrets.gcp_project_id }}

      - name: Clean old GAE versions
        uses: nabarun-ngo/ngo-nabarun-templates/.github/actions/gcp-clean-gae-versions@main
        with:
          project_id: ${{ secrets.gcp_project_id }}
          service_name: ${{ inputs.gae_service_name }}
          keep_versions: ${{ inputs.keep_gae_versions }}

      - name: Clean old GCS files
        uses: nabarun-ngo/ngo-nabarun-templates/.github/actions/gcp-clean-gcs-files@main
        continue-on-error: true
        with:
          project_id: ${{ secrets.gcp_project_id }}
          keep_days: ${{ inputs.gcs_keep_days }}
          bucket_patterns: 'auto'
          timeout_minutes: '10'
