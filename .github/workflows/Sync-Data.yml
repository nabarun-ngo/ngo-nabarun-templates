name: Sync
on:
  workflow_call:
    inputs:
      auth0_target_env:
        required: true
        type: string
      firebase_target_env:
        required: true
        type: string
      sync_auth0:
        required: true
        type: boolean
      sync_firebaseRC:
        required: true
        type: boolean
      branch_name:
        required: false
        type: string
        default : 'main'
      
    outputs:
      # Auth0 sync outputs
      auth0_sync_status:
        description: 'Status of Auth0 data synchronization'
        value: ${{ jobs.sync_data_auth0.result }}
      auth0_sync_enabled:
        description: 'Whether Auth0 sync was enabled'
        value: ${{ inputs.sync_auth0 }}
      # Firebase sync outputs
      firebase_sync_status:
        description: 'Status of Firebase data synchronization'
        value: ${{ jobs.sync_data_firebase.result }}
      firebase_sync_enabled:
        description: 'Whether Firebase sync was enabled'
        value: ${{ inputs.sync_firebaseRC }}
      # Summary outputs
      overall_status:
        description: 'Overall synchronization status'
        value: ${{ (inputs.sync_auth0 == false || jobs.sync_data_auth0.result == 'success') && (inputs.sync_firebaseRC == false || jobs.sync_data_firebase.result == 'success') && 'success' || 'failure' }}
      sync_summary:
        description: 'Synchronization summary information'
        value: 'Auth0: ${{ inputs.sync_auth0}} | Firebase: ${{ inputs.sync_firebaseRC }} | Source Env: ${{ inputs.auth0_target_env }} | Target Env: ${{ inputs.firebase_target_env }} | Branch: ${{ inputs.branch_name }}'
      operations_performed:
        description: 'List of operations that were performed'
        value: "${{ inputs.sync_auth0 && 'Auth0 Data Sync' || '' }}${{ inputs.sync_auth0 && inputs.sync_firebaseRC && ', ' || '' }}${{ inputs.sync_firebaseRC && 'Firebase Remote Config Sync' || '' }}"
    secrets:
      firebase_source_project:
        required: false
      firebase_target_project:
        required: false
      auth0_source_config:
        required: false
      auth0_dest_config:
        required: false
      firebase_service_account_source:
        required: false
      firebase_service_account_target:
        required: false
        
jobs:

  sync_data_auth0:
    name: 'Sync Auth0 Data'
    runs-on: ubuntu-latest
    if: ${{ inputs.sync_auth0 }}
    environment: ${{ inputs.auth0_target_env }}
    outputs:
      export_status: ${{ steps.export-auth0.outputs.status }}
      process_status: ${{ steps.process-auth0.outputs.status }}
      import_status: ${{ steps.import-auth0.outputs.status }}
      files_exported: ${{ steps.export-auth0.outputs.files_count }}
    steps:
    - name: Checkout repository | Branch ${{ inputs.branch_name }}
      uses: actions/checkout@v4
      with:
        repository: nabarun-ngo/ngo-nabarun-templates
        ref: ${{ inputs.branch_name }}
    
    - name: Install Auth0 Deploy CLI
      shell: bash
      run: |
        npm install -g auth0-deploy-cli@latest
        a0deploy --version
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Create JSON files from secret
      shell: bash
      run: |
        echo '${{ secrets.auth0_source_config }}' > auth0-source.json
        echo '${{ secrets.auth0_dest_config }}' > auth0-target.json
    
    - name: Export from Source Tenant
      id: export-auth0
      shell: bash
      run: |
        echo "üì§ Exporting Auth0 configuration from source tenant..."
        if a0deploy export -c auth0-source.json -f yaml -o ./exported; then
          echo "‚úÖ Auth0 export successful"
          FILES_COUNT=$(find ./exported -type f | wc -l)
          echo "üìÅ Exported $FILES_COUNT file(s)"
          echo "Files in the './exported' directory:"
          find ./exported -type f -print
          echo "status=success" >> $GITHUB_OUTPUT
          echo "files_count=$FILES_COUNT" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Auth0 export failed"
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "files_count=0" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Upload Raw Tenant File
      uses: actions/upload-artifact@v4
      with:
        name: Raw Tenant Folder
        path: ./exported
        
    - name: Run Python script to process Auth0 data
      id: process-auth0
      shell: bash
      run: |
        echo "üêç Processing Auth0 data with Python script..."
        if python scripts/auth0/process_auth0_v2.py auth0-source.json ./exported/tenant.yaml; then
          echo "‚úÖ Auth0 data processing successful"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Auth0 data processing failed"
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Upload Processed Tenant File
      uses: actions/upload-artifact@v4
      with:
        name: Processed Tenant File
        path: ./exported/tenant.yaml
        
    - name: Deploy to Target Tenant
      id: import-auth0
      shell: bash
      run: |
        echo "üöÄ Importing Auth0 configuration to target tenant..."
        echo "Files in the './exported' directory:"
        find ./exported -type f -print
        if a0deploy import -c auth0-target.json -f yaml -i ./exported/tenant.yaml; then
          echo "‚úÖ Auth0 import to target tenant successful"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Auth0 import to target tenant failed"
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

  sync_data_firebase:
    name: 'Sync Firebase Data'
    runs-on: ubuntu-latest
    if: ${{ inputs.sync_firebaseRC }}
    environment: ${{ inputs.firebase_target_env }}
    outputs:
      export_status: ${{ steps.export-firebase.outputs.status }}
      import_status: ${{ steps.import-firebase.outputs.status }}
      source_etag: ${{ steps.export-firebase.outputs.source_etag }}
      target_etag: ${{ steps.import-firebase.outputs.target_etag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'

      - name: Install jq (JSON parser)
        run: sudo apt-get install jq -y

      - name: Authenticate with Firebase (Source)
        run: |
          echo '${{ secrets.firebase_service_account_source }}' > $HOME/source-firebase.json
          gcloud auth activate-service-account --key-file=$HOME/source-firebase.json
          export ACCESS_TOKEN=$(gcloud auth print-access-token)
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Export Remote Config from Source
        id: export-firebase
        run: |
          echo "üì§ Exporting Firebase Remote Config from source project..."
          HTTP_STATUS=$(curl -w "%{http_code}" -o remote-config.json -D headers_source.txt -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Accept: application/json" \
            "https://firebaseremoteconfig.googleapis.com/v1/projects/${{ secrets.firebase_source_project }}/remoteConfig")

          if [[ $HTTP_STATUS -ge 400 ]]; then
            echo "‚ùå ERROR: Failed to export Remote Config from source (HTTP $HTTP_STATUS)"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

          ETAG=$(grep -Fi "etag:" headers_source.txt | awk '{print $2}' | tr -d '\r')
          echo "SOURCE_ETAG=$ETAG" >> $GITHUB_ENV
          echo "‚úÖ Firebase Remote Config export successful"
          echo "üè∑Ô∏è Source ETag: $ETAG"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "source_etag=$ETAG" >> $GITHUB_OUTPUT

      - name: Upload Remote Config as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: remote-config
          path: remote-config.json
          retention-days: 7  # Keep the file for 7 days

      - name: Authenticate with Firebase (Target)
        run: |
          echo '${{ secrets.firebase_service_account_target }}' > $HOME/target-firebase.json
          gcloud auth activate-service-account --key-file=$HOME/target-firebase.json
          export ACCESS_TOKEN=$(gcloud auth print-access-token)
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Get Target Remote Config ETag
        run: |
          HTTP_STATUS=$(curl -w "%{http_code}" -o /dev/null -D headers_target.txt -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Accept: application/json" \
            "https://firebaseremoteconfig.googleapis.com/v1/projects/${{ secrets.firebase_target_project }}/remoteConfig")

          if [[ $HTTP_STATUS -ge 400 ]]; then
            echo "‚ùå ERROR: Failed to retrieve Remote Config from target (HTTP $HTTP_STATUS)"
            exit 1
          fi

          ETAG=$(grep -Fi "etag:" headers_target.txt | awk '{print $2}' | tr -d '\r')

          if [[ -z "$ETAG" ]]; then
            echo "‚ö†Ô∏è Target ETag not found, using wildcard '*'"
            ETAG="*"
          fi

          echo "TARGET_ETAG=$ETAG" >> $GITHUB_ENV

      - name: Import Remote Config to Target and Print New ETag
        id: import-firebase
        run: |
          echo "üöÄ Importing Firebase Remote Config to target project..."
          HTTP_RESPONSE=$(mktemp)
          HTTP_STATUS=$(curl -w "%{http_code}" -o $HTTP_RESPONSE -D headers_response.txt -X PUT \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json; UTF-8" \
            -H "If-Match: $TARGET_ETAG" \
            -d @remote-config.json \
            "https://firebaseremoteconfig.googleapis.com/v1/projects/${{ secrets.firebase_target_project }}/remoteConfig")

          if [[ $HTTP_STATUS -ge 400 ]]; then
            echo "‚ùå ERROR: Failed to update Remote Config on target (HTTP $HTTP_STATUS)"
            cat $HTTP_RESPONSE
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

          NEW_ETAG=$(grep -Fi "etag:" headers_response.txt | awk '{print $2}' | tr -d '\r')
          echo "‚úÖ Successfully updated Remote Config!"
          echo "üìå New Target ETag: $NEW_ETAG"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "target_etag=$NEW_ETAG" >> $GITHUB_OUTPUT

      
    
