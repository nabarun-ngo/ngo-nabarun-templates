name: Resolve Inputs
description: Merge inputs from workflow_dispatch and repository_dispatch into a single JSON output

inputs:
  inputs:
    description: JSON string of workflow_dispatch inputs (optional). If empty, auto-detect via github.event.inputs
    required: false
    default: ''
  client_payload:
    description: JSON string of repository_dispatch client_payload (optional). If empty, auto-detect via github.event.client_payload
    required: false
    default: ''
  update_from_env:
    description: If set as true, this will try to override the merged json fron $GITHUB_ENV
    required: false
    default: false

outputs:
  variables:
    description: Merged inputs as a JSON string (payload overrides on conflicts)
    value: ${{ steps.final.outputs.variables }}

runs:
  using: composite
  steps:
    - id: resolve
      name: Resolve and merge inputs
      shell: bash
      run: |
        set -euo pipefail
        
        # Get inputs or fallback to event payloads
        inputs_json='${{ inputs.inputs != '' && inputs.inputs || toJson(github.event.inputs) }}'
        payload_json='${{ inputs.client_payload != '' && inputs.client_payload || toJson(github.event.client_payload) }}'

        # Determine which input to use
        if [[ "$payload_json" != "null" && ! -z "$payload_json" ]]; then
          final_data="$payload_json"
        else
          final_data="$inputs_json"
        fi

        # Ensure JSON is properly formatted
        final_data=$(echo "$final_data" | jq -c '.' || echo '{}')

        echo "Merged Data: $final_data"
        echo "variables=$final_data" >> "$GITHUB_OUTPUT"

    - id: override_env
      name: Override merged JSON from GITHUB_ENV
      if: ${{ inputs.update_from_env }}
      shell: bash
      run: |
        set -euo pipefail

    #     merged='${{ steps.resolve.outputs.variables }}'

    #     if [[ -f "${GITHUB_ENV:-}" ]]; then
    #       echo "âš¡ Overriding merged JSON from GITHUB_ENV (only existing keys, preserving types)..."

    #       while IFS= read -r line || [[ -n "$line" ]]; do
    #         [[ -z "$line" ]] && continue
    #         key="${line%%=*}"
    #         value="${line#*=}"
    #         key="$(echo -n "$key" | xargs)"
    #         value="$(echo -n "$value" | xargs)"

    #         if echo "$merged" | jq -e --arg k "$key" 'has($k)' >/dev/null 2>&1; then
    #           if [[ "$value" =~ ^(true|TRUE)$ ]]; then
    #             merged=$(echo "$merged" | jq --arg k "$key" '.[$k]=true')
    #           elif [[ "$value" =~ ^(false|FALSE)$ ]]; then
    #             merged=$(echo "$merged" | jq --arg k "$key" '.[$k]=false')
    #           elif [[ "$value" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    #             merged=$(echo "$merged" | jq --arg k "$key" --argjson v "$value" '.[$k]=$v')
    #           else
    #             merged=$(echo "$merged" | jq --arg k "$key" --arg v "$value" '.[$k]=$v')
    #           fi
    #         fi
    #       done < "$GITHUB_ENV"
    #     fi

    #     echo "Final Merged Variables After Override: $merged"
    #     echo "variables=$merged" >> "$GITHUB_OUTPUT"

    - name: Export final merged variables to GitHub environment
      shell: bash
      id: final
      run: |
        set -euo pipefail
        merged_json='${{ inputs.update_from_env == 'true' && steps.override_env.outputs.variables || steps.resolve.outputs.variables }}'
        echo "$merged_json" | jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | .[]' >> "$GITHUB_ENV"
        echo "variables=$merged" >> "$GITHUB_OUTPUT"

    - name: Print all GitHub environment variables
      shell: bash
      run: |
        echo "All GitHub environment variables (key=value):"
        env
