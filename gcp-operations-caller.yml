name: 'GCP Operations Manager'

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - download-logs
          - restart-app-engine
          - cleanup-gcp-resources
        default: download-logs
      environment:
        description: 'Environment to operate on'
        required: true
        type: choice
        options:
          - staging
          - prod
        default: staging
      project_id:
        description: 'GCP Project ID'
        required: true
        type: string
      service_name:
        description: 'App Engine service name (for restart/cleanup operations)'
        required: false
        type: string
        default: 'default'
      # For download-logs: log filter query
      # For restart-app-engine: version ID to restart (empty = all)
      # For cleanup-gcp-resources: GAE versions to keep
      primary_param:
        description: 'Primary parameter: Log filter | Version ID | GAE versions to keep (1-10)'
        required: false
        type: string
        default: 'textPayload:"sample-filter"'
      # For download-logs: output format (txt/csv/html/json)
      # For restart-app-engine: dry run (true/false)
      # For cleanup-gcp-resources: GCS keep days (1-365)
      secondary_param:
        description: 'Secondary parameter: Output format | Dry run | GCS keep days'
        required: false
        type: string
        default: 'txt'
      # For download-logs: time range filter
      # For restart-app-engine: wait timeout in seconds
      # For cleanup-gcp-resources: cleanup timeout in minutes
      tertiary_param:
        description: 'Tertiary parameter: Time range | Wait timeout (sec) | Cleanup timeout (min)'
        required: false
        type: string
        default: ''
      # For download-logs: max log entries (default 1000)
      # For restart-app-engine: confirmation (must be "yes" to proceed)
      # For cleanup-gcp-resources: GCS bucket patterns
      quaternary_param:
        description: 'Quaternary parameter: Max entries | Confirmation ("yes") | Bucket patterns'
        required: false
        type: string
        default: '1000'
      # For download-logs: include metadata (true/false)
      # For restart-app-engine: not used
      # For cleanup-gcp-resources: not used
      quinary_param:
        description: 'Fifth parameter: Include metadata (true/false) | Not used | Not used'
        required: false
        type: string
        default: 'true'
      output_filename:
        description: 'Custom output filename (download-logs only, without extension)'
        required: false
        type: string
        default: ''

jobs:
  gcp-operations:
    name: 'Execute GCP Operation'
    uses: ngo-nabarun-templates/.github/workflows/GCP-Ops.yml@main
    with:
      operation: ${{ inputs.operation }}
      environment: ${{ inputs.environment }}
      project_id: ${{ inputs.project_id }}
      log_filter: ${{ inputs.log_filter }}
      output_format: ${{ inputs.output_format }}
      output_filename: ${{ inputs.output_filename }}
      time_range: ${{ inputs.time_range }}
      limit: ${{ inputs.limit }}
      include_metadata: ${{ inputs.include_metadata }}
      service_name: ${{ inputs.service_name }}
      version_id: ${{ inputs.version_id }}
      confirm_restart: ${{ inputs.confirm_restart }}
      dry_run: ${{ inputs.dry_run }}
      wait_timeout: ${{ inputs.wait_timeout }}
      keep_gae_versions: ${{ inputs.keep_gae_versions }}
      gcs_keep_days: ${{ inputs.gcs_keep_days }}
      gcs_bucket_patterns: ${{ inputs.gcs_bucket_patterns }}
      cleanup_timeout_minutes: ${{ inputs.cleanup_timeout_minutes }}
    secrets:
      gcp_sa_key: ${{ secrets.GCP_SA_KEY }}

  display-results:
    name: 'Display Operation Results'
    runs-on: ubuntu-latest
    needs: gcp-operations
    if: always()
    steps:
      - name: Generate Results Summary
        run: |
          echo "# ☁️ GCP Operations Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Basic operation info
          echo "## 📋 Operation Details" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Operation** | \`${{ inputs.operation }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | \`${{ inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Project ID** | \`${{ inputs.project_id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ${{ needs.gcp-operations.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Timestamp** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Operation specific details
          if [ "${{ inputs.operation }}" = "download-logs" ]; then
            echo "## 📥 Download Logs Details" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Filter** | \`${{ inputs.log_filter }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Output Format** | \`${{ inputs.output_format }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Limit** | ${{ inputs.limit }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Include Metadata** | ${{ inputs.include_metadata }} |" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ inputs.time_range }}" ]; then
              echo "| **Time Range** | \`${{ inputs.time_range }}\` |" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ inputs.operation }}" = "restart-app-engine" ]; then
            echo "## 🔁 Restart App Engine Details" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Service** | \`${{ inputs.service_name }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Version** | \`${{ inputs.version_id || 'All versions' }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Confirmation** | ${{ inputs.confirm_restart }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Dry Run** | ${{ inputs.dry_run }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Wait Timeout** | ${{ inputs.wait_timeout }}s |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Add safety warning for restart operations
            if [ "${{ inputs.confirm_restart }}" = "yes" ] && [ "${{ inputs.dry_run }}" = "false" ]; then
              echo "### ⚠️ DANGER ZONE" >> $GITHUB_STEP_SUMMARY
              echo "This operation **DELETED ALL RUNNING INSTANCES** for the specified App Engine service!" >> $GITHUB_STEP_SUMMARY
              echo "New instances will be created automatically when traffic arrives." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ inputs.operation }}" = "cleanup-gcp-resources" ]; then
            echo "## 🗑️ Cleanup GCP Resources Details" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Service** | \`${{ inputs.service_name }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Keep GAE Versions** | ${{ inputs.keep_gae_versions }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **GCS Keep Days** | ${{ inputs.gcs_keep_days }} |" >> $GITHUB_STEP_SUMMARY
            echo "| **GCS Bucket Patterns** | \`${{ inputs.gcs_bucket_patterns }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Cleanup Timeout** | ${{ inputs.cleanup_timeout_minutes }} minutes |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Results section
          echo "## 📊 Operation Results" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ needs.gcp-operations.outputs.operation_result }}" ]; then
            echo "${{ needs.gcp-operations.outputs.operation_result }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Add specific metrics for different operations
            if [ "${{ inputs.operation }}" = "download-logs" ]; then
              echo "### 📈 Download Metrics" >> $GITHUB_STEP_SUMMARY
              if [ -n "${{ needs.gcp-operations.outputs.log_count }}" ]; then
                echo "- **Log Entries Retrieved:** ${{ needs.gcp-operations.outputs.log_count }}" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -n "${{ needs.gcp-operations.outputs.execution_time }}" ]; then
                echo "- **Execution Time:** ${{ needs.gcp-operations.outputs.execution_time }}" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -n "${{ needs.gcp-operations.outputs.output_path }}" ]; then
                echo "- **Output File:** \`${{ needs.gcp-operations.outputs.output_path }}\`" >> $GITHUB_STEP_SUMMARY
              fi
              echo "" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ inputs.operation }}" = "restart-app-engine" ]; then
              echo "### 📈 Restart Metrics" >> $GITHUB_STEP_SUMMARY
              if [ -n "${{ needs.gcp-operations.outputs.instances_deleted }}" ]; then
                echo "- **Instances Deleted:** ${{ needs.gcp-operations.outputs.instances_deleted }}" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -n "${{ needs.gcp-operations.outputs.instances_recreated }}" ]; then
                echo "- **Instances Now Running:** ${{ needs.gcp-operations.outputs.instances_recreated }}" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -n "${{ needs.gcp-operations.outputs.service_status }}" ]; then
                echo "- **Service Status:** ${{ needs.gcp-operations.outputs.service_status }}" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -n "${{ needs.gcp-operations.outputs.execution_time }}" ]; then
                echo "- **Execution Time:** ${{ needs.gcp-operations.outputs.execution_time }}" >> $GITHUB_STEP_SUMMARY
              fi
              echo "" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ inputs.operation }}" = "cleanup-gcp-resources" ]; then
              echo "### 📈 Cleanup Metrics" >> $GITHUB_STEP_SUMMARY
              if [ -n "${{ needs.gcp-operations.outputs.cleanup_result }}" ]; then
                echo "- **Overall Result:** ${{ needs.gcp-operations.outputs.cleanup_result }}" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -n "${{ needs.gcp-operations.outputs.resources_cleaned }}" ]; then
                echo "- **Resources Processed:** ${{ needs.gcp-operations.outputs.resources_cleaned }}" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -n "${{ needs.gcp-operations.outputs.execution_time }}" ]; then
                echo "- **Execution Time:** ${{ needs.gcp-operations.outputs.execution_time }}" >> $GITHUB_STEP_SUMMARY
              fi
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ No operation results available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status and recommendations
          if [ "${{ needs.gcp-operations.result }}" = "success" ]; then
            echo "## ✅ Operation Completed Successfully" >> $GITHUB_STEP_SUMMARY
            echo "The GCP operation completed without errors." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ inputs.operation }}" = "download-logs" ]; then
              echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
              echo "- Check the **Artifacts** section below to download the log file" >> $GITHUB_STEP_SUMMARY
              echo "- Review the log entries for any issues or patterns" >> $GITHUB_STEP_SUMMARY
              echo "- Consider adjusting the filter if you need more specific results" >> $GITHUB_STEP_SUMMARY
              if [ "${{ needs.gcp-operations.outputs.log_count }}" = "0" ]; then
                echo "- **Note:** No logs found - you may need to adjust your filter or time range" >> $GITHUB_STEP_SUMMARY
              fi
            elif [ "${{ inputs.operation }}" = "restart-app-engine" ]; then
              echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
              if [ "${{ inputs.dry_run }}" = "true" ]; then
                echo "- This was a **dry run** - no actual changes were made" >> $GITHUB_STEP_SUMMARY
                echo "- Review the planned actions and run again with dry_run=false if desired" >> $GITHUB_STEP_SUMMARY
              else
                echo "- Monitor your application for proper startup and functionality" >> $GITHUB_STEP_SUMMARY
                echo "- New instances will be created automatically when traffic arrives" >> $GITHUB_STEP_SUMMARY
                echo "- Check App Engine console for service health and instance status" >> $GITHUB_STEP_SUMMARY
                if [ "${{ needs.gcp-operations.outputs.instances_recreated }}" = "0" ]; then
                  echo "- **Note:** No instances currently running (normal for auto-scaled services)" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            elif [ "${{ inputs.operation }}" = "cleanup-gcp-resources" ]; then
              echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
              echo "- Review the cleanup results above to ensure all operations completed successfully" >> $GITHUB_STEP_SUMMARY
              echo "- Check GCP Console to verify old resources have been removed" >> $GITHUB_STEP_SUMMARY
              echo "- Monitor your applications to ensure they're still functioning properly" >> $GITHUB_STEP_SUMMARY
              echo "- Consider adjusting retention policies if too many or too few resources were cleaned" >> $GITHUB_STEP_SUMMARY
              echo "- **Next cleanup:** Based on your settings, run this again when needed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ❌ Operation Failed" >> $GITHUB_STEP_SUMMARY
            echo "The GCP operation encountered errors. Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "1. Verify your GCP service account has the required permissions" >> $GITHUB_STEP_SUMMARY
            echo "2. Check that the project ID is correct and accessible" >> $GITHUB_STEP_SUMMARY
            echo "3. Ensure the log filter syntax is valid" >> $GITHUB_STEP_SUMMARY
            echo "4. Review the workflow logs for specific error messages" >> $GITHUB_STEP_SUMMARY
          fi

  notify-completion:
    name: 'Notify on Failure'
    runs-on: ubuntu-latest
    needs: [gcp-operations, display-results]
    if: always() && needs.gcp-operations.result == 'failure'
    steps:
      - name: Create Failure Notification
        run: |
          echo "🚨 GCP operation failed!" >> $GITHUB_STEP_SUMMARY
          echo "**Operation:** ${{ inputs.operation }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Project:** ${{ inputs.project_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs and GCP permissions." >> $GITHUB_STEP_SUMMARY
          
          # You can add additional notification logic here, such as:
          # - Slack notifications
          # - Email alerts  
          # - Teams webhooks
          # - JIRA ticket creation
